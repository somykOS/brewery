buildscript {
	dependencies {
		classpath "de.guntram.mcmod:crowdin-translate:1.4+1.19.3"
	}
	repositories {
		maven {
			name = 'CrowdinTranslate source'
			url = "https://minecraft.guntram.de/maven/"
		}
	}
}

plugins {
	id 'fabric-loom' version '1.9.+'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}


version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

apply plugin: 'de.guntram.mcmod.crowdin-translate'
crowdintranslate.crowdinProjectName = 'patbox-mods'
crowdintranslate.jsonSourceName = 'brewery'
crowdintranslate.minecraftProjectName = '../data/brewery'
crowdintranslate.verbose = false


repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more formation about repositories.
	maven { url "https://maven.nucleoid.xyz" }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	mavenLocal()
}

loom {
	accessWidenerPath = file("src/main/resources/brewery.accesswidener")

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation include('xyz.nucleoid:server-translations-api:2.3.1+1.21-pre2')
	modImplementation include('eu.pb4:polymer-core:0.9.0+1.21-rc1')
	modImplementation include('eu.pb4:polymer-resource-pack:0.9.0+1.21-rc1')
	modImplementation include('eu.pb4:polymer-virtual-entity:0.9.0+1.21-rc1')
	modImplementation include("eu.pb4:sgui:1.6.1+1.21.1")
	modImplementation include("eu.pb4:placeholder-api:2.4.0-pre.2+1.21")
	modImplementation include("me.lucko:fabric-permissions-api:0.3.1")
	//modImplementation include('xyz.nucleoid:more-codecs:0.2.2+1.18')

	implementation include("net.objecthunter:exp4j:0.4.8")


	modCompileOnly "maven.modrinth:polydex:1.1.0+1.20.5-rc3"

	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	from("src/main/resources/data/brewery/lang") {
		into("assets/brewery/lang")
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

curseforge {
	if (System.getenv("CURSEFORGE")) {
		apiKey = System.getenv("CURSEFORGE")

		project {
			id = "681703"
			releaseType = "release"
			changelog = System.getenv("CHANGELOG")
			changelogType = "markdown"
			addGameVersion((project.minecraft_version.contains("-") ? ((String) project.minecraft_version.split("-")[0] + "-Snapshot") : project.minecraft_version))
			addGameVersion "Fabric"
			//addGameVersion "Quilt"
			mainArtifact(remapJar)

			afterEvaluate {
				uploadTask.dependsOn("remapJar")
			}
		}
	}

	options {
		forgeGradleIntegration = false
	}
	remapJar {
		finalizedBy project.tasks.curseforge
	}
}

if (System.getenv("MODRINTH")) {
	modrinth {
		token = System.getenv("MODRINTH")
		projectId = 'nr7cSJlY'// The ID of your modrinth project, slugs will not work.
		versionNumber = "" + version // The version of the mod to upload.
		versionType = "release"
		uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
		gameVersions = [((String) project.minecraft_version)]
		changelog = System.getenv("CHANGELOG")
		loaders = ["fabric", "quilt"]
	}

	remapJar {
		finalizedBy project.tasks.modrinth
	}
}
